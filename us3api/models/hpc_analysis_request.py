# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from us3api.models.hpc_analysis_method import HPCAnalysisMethod
from us3api.models.hpc_analysis_queue_status import HPCAnalysisQueueStatus
from us3api.models.hpc_job_dataset import HPCJobDataset
from us3api.models.hpc_job_result_set import HPCJobResultSet
from typing import Optional, Set
from typing_extensions import Self

class HPCAnalysisRequest(BaseModel):
    """
    HPCAnalysisRequest
    """ # noqa: E501
    hp_crequest_id: StrictInt = Field(alias="HPCrequestID")
    experiment_id: Optional[StrictInt] = Field(default=None, alias="experimentID")
    queue_status: Optional[HPCAnalysisQueueStatus] = Field(default=HPCAnalysisQueueStatus.QUEUED, alias="queueStatus")
    last_message: Optional[StrictStr] = Field(default=None, alias="lastMessage")
    update_time: Optional[datetime] = Field(default=None, alias="updateTime")
    start_time: Optional[datetime] = Field(default=None, alias="startTime")
    end_time: Optional[datetime] = Field(default=None, alias="endTime")
    gfac_id: Optional[StrictStr] = Field(default=None, alias="gfacID")
    investigator_guid: Optional[StrictStr] = Field(default=None, alias="investigatorGUID")
    submitter_guid: Optional[StrictStr] = Field(default=None, alias="submitterGUID")
    submit_time: Optional[datetime] = Field(default=None, alias="submitTime")
    cluster: Optional[StrictStr] = None
    method: Optional[HPCAnalysisMethod] = HPCAnalysisMethod.ENUM_2_DSA
    anal_type: Optional[StrictStr] = Field(default=None, alias="analType")
    datasets: Optional[List[HPCJobDataset]] = None
    results: Optional[List[HPCJobResultSet]] = None
    __properties: ClassVar[List[str]] = ["HPCrequestID", "experimentID", "queueStatus", "lastMessage", "updateTime", "startTime", "endTime", "gfacID", "investigatorGUID", "submitterGUID", "submitTime", "cluster", "method", "analType", "datasets", "results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HPCAnalysisRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item in self.datasets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datasets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HPCAnalysisRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HPCrequestID": obj.get("HPCrequestID"),
            "experimentID": obj.get("experimentID"),
            "queueStatus": obj.get("queueStatus") if obj.get("queueStatus") is not None else HPCAnalysisQueueStatus.QUEUED,
            "lastMessage": obj.get("lastMessage"),
            "updateTime": obj.get("updateTime"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "gfacID": obj.get("gfacID"),
            "investigatorGUID": obj.get("investigatorGUID"),
            "submitterGUID": obj.get("submitterGUID"),
            "submitTime": obj.get("submitTime"),
            "cluster": obj.get("cluster"),
            "method": obj.get("method") if obj.get("method") is not None else HPCAnalysisMethod.ENUM_2_DSA,
            "analType": obj.get("analType"),
            "datasets": [HPCJobDataset.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "results": [HPCJobResultSet.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None
        })
        return _obj


