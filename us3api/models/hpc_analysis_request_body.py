# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from us3api.models.hpc_analysis_method import HPCAnalysisMethod
from us3api.models.hpc_job_data_set_data import HPCJobDataSetData
from us3api.models.hpc_job_parameters import HPCJobParameters
from typing import Optional, Set
from typing_extensions import Self

class HPCAnalysisRequestBody(BaseModel):
    """
    HPCAnalysisRequestBody
    """ # noqa: E501
    separate_datasets: Optional[StrictStr] = 'separate'
    datasets: Optional[List[HPCJobDataSetData]] = None
    job_parameters: Optional[HPCJobParameters] = None
    clusternode: Optional[StrictStr] = None
    investigator_id: Optional[StrictInt] = Field(default=None, description="ID of the data owner in case you submit on behalf of someone else")
    hpc_analysis_method: Optional[HPCAnalysisMethod] = Field(default=HPCAnalysisMethod.ENUM_2_DSA,
                                                             alias="HPCAnalysisMethod")
    __properties: ClassVar[List[str]] = ["separate_datasets", "datasets", "job_parameters", "clusternode", "investigator_id", "HPCAnalysisMethod"]

    @field_validator('separate_datasets')
    def separate_datasets_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['global', 'separate', 'composite']):
            raise ValueError("must be one of enum values ('global', 'separate', 'composite')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HPCAnalysisRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item in self.datasets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datasets'] = _items
        # override the default output from pydantic by calling `to_dict()` of job_parameters
        if self.job_parameters:
            _dict['job_parameters'] = self.job_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HPCAnalysisRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "separate_datasets": obj.get("separate_datasets") if obj.get("separate_datasets") is not None else 'separate',
            "datasets": [HPCJobDataSetData.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "job_parameters": HPCJobParameters.from_dict(obj["job_parameters"]) if obj.get("job_parameters") is not None else None,
            "clusternode": obj.get("clusternode"),
            "investigator_id": obj.get("investigator_id"),
            "HPCAnalysisMethod": obj.get("HPCAnalysisMethod") if obj.get("HPCAnalysisMethod") is not None else HPCAnalysisMethod.ENUM_2_DSA
        })
        return _obj


