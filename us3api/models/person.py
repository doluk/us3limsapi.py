# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from us3api.models.cluster_node import ClusterNode
from typing import Optional, Set
from typing_extensions import Self

class Person(BaseModel):
    """
    Person
    """ # noqa: E501
    person_id: StrictInt = Field(alias="personID")
    person_guid: StrictStr = Field(alias="personGUID")
    email: StrictStr
    first_name: StrictStr = Field(alias="firstName")
    last_name: StrictStr = Field(alias="lastName")
    activated: bool
    username: Optional[StrictStr] = None
    advanced_level: Optional[bool] = Field(default=None, alias="advancedLevel")
    user_level: Optional[StrictInt] = Field(default=None, alias="userLevel")
    cluster_authorizations: Optional[StrictStr] = Field(default=None, alias="clusterAuthorizations")
    cluster_nodes: Optional[List[ClusterNode]] = Field(default=None, alias="clusterNodes")
    __properties: ClassVar[List[str]] = ["personID", "personGUID", "email", "firstName", "lastName", "activated", "username", "advancedLevel", "userLevel", "clusterAuthorizations", "clusterNodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Person from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_nodes (list)
        _items = []
        if self.cluster_nodes:
            for _item in self.cluster_nodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['clusterNodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Person from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "personID": obj.get("personID"),
            "personGUID": obj.get("personGUID"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "activated": obj.get("activated"),
            "username": obj.get("username"),
            "advancedLevel": obj.get("advancedLevel"),
            "userLevel": obj.get("userLevel"),
            "clusterAuthorizations": obj.get("clusterAuthorizations"),
            "clusterNodes": [ClusterNode.from_dict(_item) for _item in obj["clusterNodes"]] if obj.get("clusterNodes") is not None else None
        })
        return _obj


