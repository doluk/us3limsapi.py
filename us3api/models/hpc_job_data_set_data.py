# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from us3api.models.radial_grid import RadialGrid
from us3api.models.time_grid import TimeGrid
from typing import Optional, Set
from typing_extensions import Self

class HPCJobDataSetData(BaseModel):
    """
    HPCJobDataSetData
    """ # noqa: E501
    edit_id: Optional[StrictInt] = Field(default=-1, description="ID of the data edit, -1 for latest edit")
    raw_data_id: Optional[StrictInt] = Field(default=None, description="ID of the raw data, will use automatically the latest edit if edit_id is -1 or not provided")
    ri_noise: Optional[StrictInt] = Field(default=-1, description="ID of the ri noise data, -1 for latest noise, 0 for no noise")
    ti_noise: Optional[StrictInt] = Field(default=-1, description="ID of the ti noise data, -1 for latest noise, 0 for no noise")
    simpoints: Optional[StrictInt] = 200
    band_volume: Optional[Union[StrictFloat, StrictInt]] = 0.0
    radial_grid: Optional[RadialGrid] = RadialGrid.ASTFEM
    time_grid: Optional[TimeGrid] = TimeGrid.AST
    __properties: ClassVar[List[str]] = ["edit_id", "raw_data_id", "ri_noise", "ti_noise", "simpoints", "band_volume", "radial_grid", "time_grid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HPCJobDataSetData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HPCJobDataSetData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "edit_id": obj.get("edit_id") if obj.get("edit_id") is not None else -1,
            "raw_data_id": obj.get("raw_data_id"),
            "ri_noise": obj.get("ri_noise") if obj.get("ri_noise") is not None else -1,
            "ti_noise": obj.get("ti_noise") if obj.get("ti_noise") is not None else -1,
            "simpoints": obj.get("simpoints") if obj.get("simpoints") is not None else 200,
            "band_volume": obj.get("band_volume") if obj.get("band_volume") is not None else 0.0,
            "radial_grid": obj.get("radial_grid") if obj.get("radial_grid") is not None else RadialGrid.ASTFEM,
            "time_grid": obj.get("time_grid") if obj.get("time_grid") is not None else TimeGrid.AST
        })
        return _obj


