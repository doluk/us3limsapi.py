# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from us3api.models.global_type import GlobalType
from us3api.models.noise import Noise
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """
    Model
    """ # noqa: E501
    model_id: StrictInt = Field(alias="modelID")
    description: StrictStr
    global_type: GlobalType = Field(alias="globalType")
    meniscus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The meniscus used for the analysis producing this model")
    mc_iteration: Optional[StrictInt] = Field(default=None, alias="MCIteration")
    variance: Optional[Union[StrictFloat, StrictInt]] = None
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    ti_noise: Optional[Noise] = None
    ri_noise: Optional[Noise] = None
    edit: Optional[EditedData] = None
    hp_crequest_id: Optional[StrictInt] = Field(default=None, alias="HPCrequestID")
    __properties: ClassVar[List[str]] = ["modelID", "description", "globalType", "meniscus", "MCIteration", "variance", "lastUpdated", "ti_noise", "ri_noise", "edit", "HPCrequestID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ti_noise
        if self.ti_noise:
            _dict['ti_noise'] = self.ti_noise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ri_noise
        if self.ri_noise:
            _dict['ri_noise'] = self.ri_noise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of edit
        if self.edit:
            _dict['edit'] = self.edit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "modelID": obj.get("modelID"),
            "description": obj.get("description"),
            "globalType": obj.get("globalType") if obj.get("globalType") is not None else GlobalType.NORMAL,
            "meniscus": obj.get("meniscus"),
            "MCIteration": obj.get("MCIteration"),
            "variance": obj.get("variance"),
            "lastUpdated": obj.get("lastUpdated"),
            "ti_noise": Noise.from_dict(obj["ti_noise"]) if obj.get("ti_noise") is not None else None,
            "ri_noise": Noise.from_dict(obj["ri_noise"]) if obj.get("ri_noise") is not None else None,
            "edit": EditedData.from_dict(obj["edit"]) if obj.get("edit") is not None else None,
            "HPCrequestID": obj.get("HPCrequestID")
        })
        return _obj

from us3api.models.edited_data import EditedData
# TODO: Rewrite to not use raise_errors
Model.model_rebuild(raise_errors=False)

