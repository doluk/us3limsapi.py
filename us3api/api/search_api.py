# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from us3api.models.experiment import Experiment
from us3api.models.hpc_analysis_method import HPCAnalysisMethod
from us3api.models.hpc_analysis_queue_status import HPCAnalysisQueueStatus
from us3api.models.hpc_analysis_request import HPCAnalysisRequest
from us3api.models.person import Person
from us3api.models.raw_data import RawData

from us3api.api_client import ApiClient, RequestSerialized
from us3api.api_response import ApiResponse
from us3api.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def experiments_search_get(
        self,
        project_id: Annotated[Optional[StrictInt], Field(description="ID of project to search for")] = None,
        run_id: Annotated[Optional[StrictStr], Field(description="ID of run to search for")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Label of experiment to search for")] = None,
        project: Annotated[Optional[StrictStr], Field(description="Description of project to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Experiment]:
        """experiments_search_get

        Search for experiments

        :param project_id: ID of project to search for
        :type project_id: int
        :param run_id: ID of run to search for
        :type run_id: str
        :param label: Label of experiment to search for
        :type label: str
        :param project: Description of project to search for
        :type project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._experiments_search_get_serialize(
            project_id=project_id,
            run_id=run_id,
            label=label,
            project=project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Experiment]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def experiments_search_get_with_http_info(
        self,
        project_id: Annotated[Optional[StrictInt], Field(description="ID of project to search for")] = None,
        run_id: Annotated[Optional[StrictStr], Field(description="ID of run to search for")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Label of experiment to search for")] = None,
        project: Annotated[Optional[StrictStr], Field(description="Description of project to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Experiment]]:
        """experiments_search_get

        Search for experiments

        :param project_id: ID of project to search for
        :type project_id: int
        :param run_id: ID of run to search for
        :type run_id: str
        :param label: Label of experiment to search for
        :type label: str
        :param project: Description of project to search for
        :type project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._experiments_search_get_serialize(
            project_id=project_id,
            run_id=run_id,
            label=label,
            project=project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Experiment]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def experiments_search_get_without_preload_content(
        self,
        project_id: Annotated[Optional[StrictInt], Field(description="ID of project to search for")] = None,
        run_id: Annotated[Optional[StrictStr], Field(description="ID of run to search for")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Label of experiment to search for")] = None,
        project: Annotated[Optional[StrictStr], Field(description="Description of project to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """experiments_search_get

        Search for experiments

        :param project_id: ID of project to search for
        :type project_id: int
        :param run_id: ID of run to search for
        :type run_id: str
        :param label: Label of experiment to search for
        :type label: str
        :param project: Description of project to search for
        :type project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._experiments_search_get_serialize(
            project_id=project_id,
            run_id=run_id,
            label=label,
            project=project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Experiment]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _experiments_search_get_serialize(
        self,
        project_id,
        run_id,
        label,
        project,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('projectID', project_id))
            
        if run_id is not None:
            
            _query_params.append(('runID', run_id))
            
        if label is not None:
            
            _query_params.append(('label', label))
            
        if project is not None:
            
            _query_params.append(('project', project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'LIMSLogin', 
            'USEmail', 
            'USPassword'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/experiments/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def hpcrequests_search_get(
        self,
        experiment_id: Annotated[Optional[StrictInt], Field(description="ID of experiment to search for")] = None,
        submit_time: Annotated[Optional[datetime], Field(description="Time of submission to search for")] = None,
        cluster: Annotated[Optional[StrictStr], Field(description="Cluster to search for")] = None,
        method: Annotated[Optional[HPCAnalysisMethod], Field(description="Method to search for")] = None,
        anal_type: Annotated[Optional[StrictStr], Field(description="Type of analysis to search for")] = None,
        status: Annotated[Optional[HPCAnalysisQueueStatus], Field(description="Status of request to search for")] = None,
        edited_data_id: Annotated[Optional[StrictInt], Field(description="ID of edited data to search for")] = None,
        gfac_id: Annotated[Optional[StrictInt], Field(description="ID of gfac to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[HPCAnalysisRequest]:
        """hpcrequests_search_get

        Search for HPC analysis requests

        :param experiment_id: ID of experiment to search for
        :type experiment_id: int
        :param submit_time: Time of submission to search for
        :type submit_time: datetime
        :param cluster: Cluster to search for
        :type cluster: str
        :param method: Method to search for
        :type method: HPCAnalysisMethod
        :param anal_type: Type of analysis to search for
        :type anal_type: str
        :param status: Status of request to search for
        :type status: HPCAnalysisQueueStatus
        :param edited_data_id: ID of edited data to search for
        :type edited_data_id: int
        :param gfac_id: ID of gfac to search for
        :type gfac_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._hpcrequests_search_get_serialize(
            experiment_id=experiment_id,
            submit_time=submit_time,
            cluster=cluster,
            method=method,
            anal_type=anal_type,
            status=status,
            edited_data_id=edited_data_id,
            gfac_id=gfac_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HPCAnalysisRequest]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def hpcrequests_search_get_with_http_info(
        self,
        experiment_id: Annotated[Optional[StrictInt], Field(description="ID of experiment to search for")] = None,
        submit_time: Annotated[Optional[datetime], Field(description="Time of submission to search for")] = None,
        cluster: Annotated[Optional[StrictStr], Field(description="Cluster to search for")] = None,
        method: Annotated[Optional[HPCAnalysisMethod], Field(description="Method to search for")] = None,
        anal_type: Annotated[Optional[StrictStr], Field(description="Type of analysis to search for")] = None,
        status: Annotated[Optional[HPCAnalysisQueueStatus], Field(description="Status of request to search for")] = None,
        edited_data_id: Annotated[Optional[StrictInt], Field(description="ID of edited data to search for")] = None,
        gfac_id: Annotated[Optional[StrictInt], Field(description="ID of gfac to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[HPCAnalysisRequest]]:
        """hpcrequests_search_get

        Search for HPC analysis requests

        :param experiment_id: ID of experiment to search for
        :type experiment_id: int
        :param submit_time: Time of submission to search for
        :type submit_time: datetime
        :param cluster: Cluster to search for
        :type cluster: str
        :param method: Method to search for
        :type method: HPCAnalysisMethod
        :param anal_type: Type of analysis to search for
        :type anal_type: str
        :param status: Status of request to search for
        :type status: HPCAnalysisQueueStatus
        :param edited_data_id: ID of edited data to search for
        :type edited_data_id: int
        :param gfac_id: ID of gfac to search for
        :type gfac_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._hpcrequests_search_get_serialize(
            experiment_id=experiment_id,
            submit_time=submit_time,
            cluster=cluster,
            method=method,
            anal_type=anal_type,
            status=status,
            edited_data_id=edited_data_id,
            gfac_id=gfac_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HPCAnalysisRequest]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def hpcrequests_search_get_without_preload_content(
        self,
        experiment_id: Annotated[Optional[StrictInt], Field(description="ID of experiment to search for")] = None,
        submit_time: Annotated[Optional[datetime], Field(description="Time of submission to search for")] = None,
        cluster: Annotated[Optional[StrictStr], Field(description="Cluster to search for")] = None,
        method: Annotated[Optional[HPCAnalysisMethod], Field(description="Method to search for")] = None,
        anal_type: Annotated[Optional[StrictStr], Field(description="Type of analysis to search for")] = None,
        status: Annotated[Optional[HPCAnalysisQueueStatus], Field(description="Status of request to search for")] = None,
        edited_data_id: Annotated[Optional[StrictInt], Field(description="ID of edited data to search for")] = None,
        gfac_id: Annotated[Optional[StrictInt], Field(description="ID of gfac to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """hpcrequests_search_get

        Search for HPC analysis requests

        :param experiment_id: ID of experiment to search for
        :type experiment_id: int
        :param submit_time: Time of submission to search for
        :type submit_time: datetime
        :param cluster: Cluster to search for
        :type cluster: str
        :param method: Method to search for
        :type method: HPCAnalysisMethod
        :param anal_type: Type of analysis to search for
        :type anal_type: str
        :param status: Status of request to search for
        :type status: HPCAnalysisQueueStatus
        :param edited_data_id: ID of edited data to search for
        :type edited_data_id: int
        :param gfac_id: ID of gfac to search for
        :type gfac_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._hpcrequests_search_get_serialize(
            experiment_id=experiment_id,
            submit_time=submit_time,
            cluster=cluster,
            method=method,
            anal_type=anal_type,
            status=status,
            edited_data_id=edited_data_id,
            gfac_id=gfac_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HPCAnalysisRequest]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _hpcrequests_search_get_serialize(
        self,
        experiment_id,
        submit_time,
        cluster,
        method,
        anal_type,
        status,
        edited_data_id,
        gfac_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if experiment_id is not None:
            
            _query_params.append(('experimentID', experiment_id))
            
        if submit_time is not None:
            if isinstance(submit_time, datetime):
                _query_params.append(
                    (
                        'submitTime',
                        submit_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('submitTime', submit_time))
            
        if cluster is not None:
            
            _query_params.append(('cluster', cluster))
            
        if method is not None:
            
            _query_params.append(('method', method.value))
            
        if anal_type is not None:
            
            _query_params.append(('analType', anal_type))
            
        if status is not None:
            
            _query_params.append(('status', status.value))
            
        if edited_data_id is not None:
            
            _query_params.append(('editedDataID', edited_data_id))
            
        if gfac_id is not None:
            
            _query_params.append(('gfacID', gfac_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'LIMSLogin', 
            'USEmail', 
            'USPassword'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/hpcrequests/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def persons_search_get(
        self,
        email: Annotated[Optional[StrictStr], Field(description="Email of person to search for")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name of person to search for")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name of person to search for")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username of person to search for")] = None,
        person_id: Annotated[Optional[StrictInt], Field(description="personID of person to search for")] = None,
        person_guid: Annotated[Optional[StrictStr], Field(description="personGUID of person to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Person]:
        """persons_search_get

        Search for persons

        :param email: Email of person to search for
        :type email: str
        :param first_name: First name of person to search for
        :type first_name: str
        :param last_name: Last name of person to search for
        :type last_name: str
        :param username: Username of person to search for
        :type username: str
        :param person_id: personID of person to search for
        :type person_id: int
        :param person_guid: personGUID of person to search for
        :type person_guid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._persons_search_get_serialize(
            email=email,
            first_name=first_name,
            last_name=last_name,
            username=username,
            person_id=person_id,
            person_guid=person_guid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Person]",
            '404': None,
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def persons_search_get_with_http_info(
        self,
        email: Annotated[Optional[StrictStr], Field(description="Email of person to search for")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name of person to search for")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name of person to search for")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username of person to search for")] = None,
        person_id: Annotated[Optional[StrictInt], Field(description="personID of person to search for")] = None,
        person_guid: Annotated[Optional[StrictStr], Field(description="personGUID of person to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Person]]:
        """persons_search_get

        Search for persons

        :param email: Email of person to search for
        :type email: str
        :param first_name: First name of person to search for
        :type first_name: str
        :param last_name: Last name of person to search for
        :type last_name: str
        :param username: Username of person to search for
        :type username: str
        :param person_id: personID of person to search for
        :type person_id: int
        :param person_guid: personGUID of person to search for
        :type person_guid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._persons_search_get_serialize(
            email=email,
            first_name=first_name,
            last_name=last_name,
            username=username,
            person_id=person_id,
            person_guid=person_guid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Person]",
            '404': None,
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def persons_search_get_without_preload_content(
        self,
        email: Annotated[Optional[StrictStr], Field(description="Email of person to search for")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name of person to search for")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name of person to search for")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username of person to search for")] = None,
        person_id: Annotated[Optional[StrictInt], Field(description="personID of person to search for")] = None,
        person_guid: Annotated[Optional[StrictStr], Field(description="personGUID of person to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """persons_search_get

        Search for persons

        :param email: Email of person to search for
        :type email: str
        :param first_name: First name of person to search for
        :type first_name: str
        :param last_name: Last name of person to search for
        :type last_name: str
        :param username: Username of person to search for
        :type username: str
        :param person_id: personID of person to search for
        :type person_id: int
        :param person_guid: personGUID of person to search for
        :type person_guid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._persons_search_get_serialize(
            email=email,
            first_name=first_name,
            last_name=last_name,
            username=username,
            person_id=person_id,
            person_guid=person_guid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Person]",
            '404': None,
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _persons_search_get_serialize(
        self,
        email,
        first_name,
        last_name,
        username,
        person_id,
        person_guid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if email is not None:
            
            _query_params.append(('email', email))
            
        if first_name is not None:
            
            _query_params.append(('firstName', first_name))
            
        if last_name is not None:
            
            _query_params.append(('lastName', last_name))
            
        if username is not None:
            
            _query_params.append(('username', username))
            
        if person_id is not None:
            
            _query_params.append(('personID', person_id))
            
        if person_guid is not None:
            
            _query_params.append(('personGUID', person_guid))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'LIMSLogin', 
            'USEmail', 
            'USPassword'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/persons/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def rawdata_search_get(
        self,
        project_id: Annotated[Optional[StrictInt], Field(description="ID of project to search for")] = None,
        run_id: Annotated[Optional[StrictStr], Field(description="ID of run to search for")] = None,
        experiment_id: Annotated[Optional[StrictInt], Field(description="ID of experiment to search for")] = None,
        project: Annotated[Optional[StrictStr], Field(description="Description of project to search for")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Label of raw data to search for")] = None,
        filename: Annotated[Optional[StrictStr], Field(description="Filename of raw data to search for")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment of raw data to search for")] = None,
        solution_id: Annotated[Optional[StrictInt], Field(description="ID of solution to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RawData]:
        """rawdata_search_get

        Search for raw data

        :param project_id: ID of project to search for
        :type project_id: int
        :param run_id: ID of run to search for
        :type run_id: str
        :param experiment_id: ID of experiment to search for
        :type experiment_id: int
        :param project: Description of project to search for
        :type project: str
        :param label: Label of raw data to search for
        :type label: str
        :param filename: Filename of raw data to search for
        :type filename: str
        :param comment: Comment of raw data to search for
        :type comment: str
        :param solution_id: ID of solution to search for
        :type solution_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rawdata_search_get_serialize(
            project_id=project_id,
            run_id=run_id,
            experiment_id=experiment_id,
            project=project,
            label=label,
            filename=filename,
            comment=comment,
            solution_id=solution_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RawData]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def rawdata_search_get_with_http_info(
        self,
        project_id: Annotated[Optional[StrictInt], Field(description="ID of project to search for")] = None,
        run_id: Annotated[Optional[StrictStr], Field(description="ID of run to search for")] = None,
        experiment_id: Annotated[Optional[StrictInt], Field(description="ID of experiment to search for")] = None,
        project: Annotated[Optional[StrictStr], Field(description="Description of project to search for")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Label of raw data to search for")] = None,
        filename: Annotated[Optional[StrictStr], Field(description="Filename of raw data to search for")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment of raw data to search for")] = None,
        solution_id: Annotated[Optional[StrictInt], Field(description="ID of solution to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RawData]]:
        """rawdata_search_get

        Search for raw data

        :param project_id: ID of project to search for
        :type project_id: int
        :param run_id: ID of run to search for
        :type run_id: str
        :param experiment_id: ID of experiment to search for
        :type experiment_id: int
        :param project: Description of project to search for
        :type project: str
        :param label: Label of raw data to search for
        :type label: str
        :param filename: Filename of raw data to search for
        :type filename: str
        :param comment: Comment of raw data to search for
        :type comment: str
        :param solution_id: ID of solution to search for
        :type solution_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rawdata_search_get_serialize(
            project_id=project_id,
            run_id=run_id,
            experiment_id=experiment_id,
            project=project,
            label=label,
            filename=filename,
            comment=comment,
            solution_id=solution_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RawData]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def rawdata_search_get_without_preload_content(
        self,
        project_id: Annotated[Optional[StrictInt], Field(description="ID of project to search for")] = None,
        run_id: Annotated[Optional[StrictStr], Field(description="ID of run to search for")] = None,
        experiment_id: Annotated[Optional[StrictInt], Field(description="ID of experiment to search for")] = None,
        project: Annotated[Optional[StrictStr], Field(description="Description of project to search for")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Label of raw data to search for")] = None,
        filename: Annotated[Optional[StrictStr], Field(description="Filename of raw data to search for")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment of raw data to search for")] = None,
        solution_id: Annotated[Optional[StrictInt], Field(description="ID of solution to search for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """rawdata_search_get

        Search for raw data

        :param project_id: ID of project to search for
        :type project_id: int
        :param run_id: ID of run to search for
        :type run_id: str
        :param experiment_id: ID of experiment to search for
        :type experiment_id: int
        :param project: Description of project to search for
        :type project: str
        :param label: Label of raw data to search for
        :type label: str
        :param filename: Filename of raw data to search for
        :type filename: str
        :param comment: Comment of raw data to search for
        :type comment: str
        :param solution_id: ID of solution to search for
        :type solution_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rawdata_search_get_serialize(
            project_id=project_id,
            run_id=run_id,
            experiment_id=experiment_id,
            project=project,
            label=label,
            filename=filename,
            comment=comment,
            solution_id=solution_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RawData]",
            '500': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rawdata_search_get_serialize(
        self,
        project_id,
        run_id,
        experiment_id,
        project,
        label,
        filename,
        comment,
        solution_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('projectID', project_id))
            
        if run_id is not None:
            
            _query_params.append(('runID', run_id))
            
        if experiment_id is not None:
            
            _query_params.append(('experimentID', experiment_id))
            
        if project is not None:
            
            _query_params.append(('project', project))
            
        if label is not None:
            
            _query_params.append(('label', label))
            
        if filename is not None:
            
            _query_params.append(('filename', filename))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if solution_id is not None:
            
            _query_params.append(('solutionID', solution_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'LIMSLogin', 
            'USEmail', 
            'USPassword'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rawdata/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


