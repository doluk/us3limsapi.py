# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import datetime
import unittest

import us3api
from us3api.models.edited_data import EditedData

class TestEditedData(unittest.TestCase):
    """EditedData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EditedData:
        """Test EditedData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EditedData`

        if include_optional:
            return EditedData(
                edited_data_id = 56,
                raw_data_id = 56,
                edit_guid = '',
                label = '',
                filename = '',
                comment = '',
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                models = [
                    us3api.models.model.Model(
                        model_id = 56, 
                        description = '', 
                        global_type = 'NORMAL', 
                        meniscus = 1.337, 
                        mc_iteration = 56, 
                        variance = 1.337, 
                        last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        ti_noise = us3api.models.noise.Noise(
                            noise_id = 56, 
                            noise_type = 'ri_noise', 
                            description = '', 
                            time_entered = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            edited_data_id = 56, 
                            model_id = 56, ), 
                        ri_noise = us3api.models.noise.Noise(
                            noise_id = 56, 
                            noise_type = 'ri_noise', 
                            description = '', 
                            time_entered = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            edited_data_id = 56, 
                            model_id = 56, ), 
                        edit = us3api.models.edited_data.EditedData(
                            edited_data_id = 56, 
                            raw_data_id = 56, 
                            edit_guid = '', 
                            label = '', 
                            filename = '', 
                            comment = '', 
                            last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            latest_noises = [
                                
                                ], 
                            hp_crequest_id = 56, ), 
                        hp_crequest_id = 56, )
                    ],
                latest_noises = [
                    us3api.models.noise.Noise(
                        noise_id = 56, 
                        noise_type = 'ri_noise', 
                        description = '', 
                        time_entered = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        edited_data_id = 56, 
                        model_id = 56, )
                    ],
                hp_crequest_id = 56
            )
        else:
            return EditedData(
                edited_data_id = 56,
        )


    def testEditedData(self):
        """Test EditedData"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
