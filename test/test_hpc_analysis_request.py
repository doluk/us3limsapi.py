# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import datetime
import unittest

import us3api
from us3api.models.hpc_analysis_request import HPCAnalysisRequest

class TestHPCAnalysisRequest(unittest.TestCase):
    """HPCAnalysisRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HPCAnalysisRequest:
        """Test HPCAnalysisRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HPCAnalysisRequest`
        if include_optional:
            return HPCAnalysisRequest(
                hp_crequest_id = 56,
                experiment_id = 56,
                queue_status = 'queued',
                last_message = '',
                update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                gfac_id = '',
                investigator_guid = '',
                submitter_guid = '',
                submit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                cluster = '',
                method = '2DSA',
                anal_type = '',
                datasets = [
                    us3api.models.hpc_job_dataset.HPCJobDataset(
                        hpc_dataset_id = 56, 
                        edited_data_id = 56, 
                        raw_data_id = 56, 
                        label = '', 
                        filename = '', 
                        simpoints = 56, 
                        band_volume = 1.337, 
                        radial_grid = 'ASTFEM', 
                        time_grid = 'AST', 
                        noise = [
                            56
                            ], )
                    ],
                results = [
                    us3api.models.hpc_job_result_set.HPCJobResultSet(
                        result_id = 56, 
                        result_type = 'model', )
                    ]
            )
        else:
            return HPCAnalysisRequest(
                hp_crequest_id = 56,
        )


    def testHPCAnalysisRequest(self):
        """Test HPCAnalysisRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
