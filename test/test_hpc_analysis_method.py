# coding: utf-8

"""
    UltraScan 3 LIMS Database Instance API

    A more machine-accessible version of the UltraScan 3 LIMS functionality. The authentication is done using the user's US3 LIMS credentials and sending them with every request as header `Us-Email` and `Us-Password`. Alternatively Basic Auth can be used.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import json
import unittest

from us3api.models.hpc_analysis_method import HPCAnalysisMethod


class TestHPCAnalysisMethod(unittest.TestCase):
    
    def setUp(self):
        self.methods_enum_values = [
            '2DSA',
            '2DSA_CG',
            '2DSA_MW',
            'GA',
            'GA_MW',
            'GA_SC',
            'DMGA',
            'PCSA'
        ]
        self.invalid_enum_values = [
            'INVALID',
            'TEST',
            '123',
            '',
            None
        ]
        self.valid_jsonstr = json.dumps(self.methods_enum_values[0])
        self.invalid_jsonstr = json.dumps(self.invalid_enum_values[0])
    
    def test_from_json_valid(self):
        method = HPCAnalysisMethod.from_json(self.valid_jsonstr)
        self.assertIsNotNone(method)
        self.assertTrue(
                isinstance(method, HPCAnalysisMethod),
                'Expected instance of HPCAnalysisMethod.')
    
    def test_from_json_invalid(self):
        with self.assertRaises(ValueError):
            HPCAnalysisMethod.from_json(self.invalid_jsonstr)
    
    def test_enum_values(self):
        for enum_value in self.methods_enum_values:
            try:
                temp = hasattr(HPCAnalysisMethod, str(enum_value))
            except AssertionError:
                temp = False
            if not temp:
                try:
                    temp = HPCAnalysisMethod(enum_value) is not None
                except ValueError:
                    temp = False
                    
            self.assertTrue(temp,
                            f"Enum value '{enum_value}' missing in HPCAnalysisMethod.")
    
    def test_enum_values_invalid(self):
        for invalid_value in self.invalid_enum_values:
            temp = True
            try:
                temp = hasattr(HPCAnalysisMethod, str(invalid_value))
            except AssertionError:
                temp = True
            try:
                temp = HPCAnalysisMethod(invalid_value)
                temp = temp is not None
            except ValueError:
                temp = False
            self.assertFalse(temp,
                             f"The enum HPCAnalysisMethod should not have the attribute '{invalid_value}'.")


if __name__ == '__main__':
    unittest.main()

